{"version":3,"file":"static/js/683.9afbe847.chunk.js","mappings":"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","sources":["components/Common/FlexBox.jsx","components/Common/FlexButton.jsx","components/Common/FlexTextBox.jsx","components/Common/FlexTextArea.jsx","components/Navbar/Searchbar.jsx","constants/color.js","components/MyPage/Profile.jsx","components/MyPage/MyArticleCard.jsx","../node_modules/@tanstack/query-core/src/queriesObserver.ts","apis/userPostAPI.js","queries/mypage/useMyPostListQueries.js","../node_modules/@tanstack/react-query/src/useQueries.ts","pages/MyPage/MyPage.jsx"],"sourcesContent":["/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\n\nconst defaultProps = {\n  width: \"auto\",\n  height: \"auto\",\n  margin: \"0\",\n  padding: \"0\",\n  gap: \"0\",\n  borderRadius: \"\",\n  column: false,\n  reverse: false,\n  wrap: \"nowrap\",\n  justifyContent: \"flex-start\",\n  alignItems: \"flex-start\",\n  center: false,\n  background: \"transparent\",\n  position: \"static\",\n  top: \"0\",\n  right: \"0\",\n  borderBottom: \"0\",\n  color: \"black\",\n  boxShadow: \"0\",\n};\n\nconst FlexBox = (props) => {\n  const {\n    children,\n    width,\n    height,\n    margin,\n    padding,\n    gap,\n    borderRadius,\n    column,\n    reverse,\n    wrap,\n    justifyContent,\n    alignItems,\n    center,\n    background,\n    position,\n    right,\n    top,\n    borderBottom,\n    color,\n    boxShadow,\n    onClick,\n  } = props;\n\n  const dir = (column ? \"column\" : \"row\") + (reverse ? \"-reverse\" : \"\");\n\n  return (\n    <div\n      css={css`\n        display: flex;\n        width: ${width};\n        height: ${height};\n        margin: ${margin};\n        padding: ${padding};\n        border-radius: ${borderRadius};\n        flex-direction: ${dir};\n        flex-wrap: ${wrap};\n        justify-content: ${center ? \"center\" : justifyContent};\n        align-items: ${center ? \"center\" : alignItems};\n        background-color: ${background};\n        position: ${position};\n        top: ${top};\n        right: ${right};\n        gap: ${gap};\n        border-bottom: ${borderBottom};\n        color: ${color};\n        box-shadow: ${boxShadow};\n      `}\n      onClick={onClick}\n    >\n      {children}\n    </div>\n  );\n};\nFlexBox.defaultProps = defaultProps;\n\nexport default FlexBox;\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport COLOR from \"constants/color\";\n\nconst defaultProps = {\n  type: \"button\",\n  width: \"auto\",\n  height: \"auto\",\n  margin: \"0\",\n  padding: \"0.6rem 1.5rem\",\n  fontWeight: 800,\n  borderRadius: \"0.62rem\",\n  fontSize: \"1.2rem\",\n  color: COLOR.font.main,\n  textDecoration: \"none\",\n  backgroundColor: \"transparent\",\n  disabled: false,\n  onClick: Function,\n};\n\nconst FlexButton = (props) => {\n  const {\n    children,\n    width,\n    height,\n    type,\n    disabled,\n    margin,\n    padding,\n    borderRadius,\n    fontSize,\n    fontWeight,\n    color,\n    textDecoration,\n    backgroundColor,\n    onClick,\n  } = props;\n\n  return (\n    <button\n      type={type}\n      onClick={onClick}\n      disabled={disabled}\n      css={css`\n        width: ${width};\n        height: ${height};\n        padding: ${padding};\n        margin: ${margin};\n        border: 0;\n        outline: 0;\n        border-radius: ${borderRadius};\n        font-size: ${fontSize};\n        font-weight: ${fontWeight};\n        background: ${backgroundColor};\n        color: ${color};\n        text-decoration: ${textDecoration};\n        cursor: pointer;\n        transition: all ease 0.25s;\n      `}\n    >\n      {children}\n    </button>\n  );\n};\nFlexButton.defaultProps = defaultProps;\n\nexport default FlexButton;\n","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nimport COLOR from \"constants/color\";\n\nconst defaultProps = {\n  width: \"auto\",\n  height: \"auto\",\n  margin: \"0\",\n  padding: \"0\",\n  fontSize: \"1rem\",\n  lineHeight: \"120%\",\n  textAlign: \"left\",\n  color: COLOR.font.main,\n  fontWeight: \"800\",\n  background: \"\",\n  marginBottom: \"0\",\n};\n\nconst FlexTextBox = (props) => {\n  const {\n    children,\n    width,\n    height,\n    padding,\n    margin,\n    fontSize,\n    color,\n    fontWeight,\n    lineHeight,\n    textAlign,\n    background,\n    marginBottom,\n  } = props;\n\n  return (\n    <div\n      css={css`\n        width: ${width};\n        height: ${height};\n        margin: ${margin};\n        padding: ${padding};\n        font-size: ${fontSize};\n        font-weight: ${fontWeight};\n        line-height: ${lineHeight};\n        text-align: ${textAlign};\n        color: ${color};\n        background: ${background};\n        margin-bottom: ${marginBottom};\n      `}\n    >\n      {children}\n    </div>\n  );\n};\nFlexTextBox.defaultProps = defaultProps;\n\nexport default FlexTextBox;\n","/** @jsxImportSource @emotion/react */\nimport TextareaAutosize from \"@mui/base/TextareaAutosize\";\nimport { css } from \"@emotion/react\";\n\nconst defaultProps = {\n  width: \"100%\",\n  minRow: 1,\n  margin: \"0\",\n  padding: \"0.8rem\",\n  fontSize: \"1.2rem\",\n  background: \"#ECF2FE\",\n  maxLength: 900000,\n  autoFocus: false,\n  borderRadius: \"1rem\",\n  value: \"\",\n  onClick: \"\",\n};\n\nconst Textarea = (props) => {\n  const {\n    text,\n    width,\n    minRow,\n    margin,\n    padding,\n    fontSize,\n    background,\n    maxLength,\n    value,\n    onChange,\n    autoFocus,\n    borderRadius,\n  } = props;\n\n  return (\n    <TextareaAutosize\n      autoFocus={autoFocus}\n      value={value}\n      onChange={onChange}\n      aria-label=\"empty textarea\"\n      placeholder={text}\n      minRows={minRow}\n      maxLength={maxLength}\n      css={css`\n        width: ${width} !important;\n        border-radius: ${borderRadius} !important;\n        border: none !important;\n        padding: ${padding};\n        font-size: ${fontSize};\n        font-family: \"Pr-Bold\";\n        color: black;\n        background-color: ${background} !important;\n        margin: ${margin};\n        resize: none;\n        line-height: calc(${fontSize} + 0.6rem);\n      `}\n    />\n  );\n};\nTextarea.defaultProps = defaultProps;\n\nexport default Textarea;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Search } from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport { Icon } from \"semantic-ui-react\";\nimport FlexBox from \"components/Common/FlexBox\";\n\nconst SearchBar = styled(Search)`\n  .ui.input > input {\n    width: 46rem;\n    height: 2.6rem;\n    border: none;\n    background-color: #f2f2f2;\n  }\n`;\n\nconst BellIcon = styled(Icon)`\n  margin: 0.5rem 0 0 1.2rem !important;\n  width: 2rem;\n  color: #898989;\n`;\n\nconst Searchbar = () => (\n  <FlexBox>\n    <SearchBar size=\"huge\" showNoResults={false} />\n    <BellIcon name=\"bell outline\" size=\"big\" />\n  </FlexBox>\n);\nexport default Searchbar;\n","const COLOR = {\n  font: {\n    main: \"#282828\",\n    sub: \"#737373\",\n    select: \" #898989\",\n    select_text: \"#313131\",\n  },\n  btn: {\n    main_gra: \"linear-gradient(to right, #66A3FF, #F387FF)\",\n    gra2: \"linear-gradient(to bottom, #FFA756, #F982FF)\",\n  },\n  bg: {\n    default: \"#FAFAFA\",\n    dep1: \"#f2f2f2\",\n    blue: \"#ECF2FE\",\n  },\n  border: {\n    default: \"#b0b0b0\",\n  },\n};\n\nexport default COLOR;\n","import { FlexBox, FlexTextBox } from \"components/Common\";\nimport { userInfo } from \"states\";\nimport { useRecoilValue } from \"recoil\";\nconst Profile = () => {\n  const user = useRecoilValue(userInfo);\n\n  return (\n    <FlexBox gap=\"0.3rem\">\n      <FlexBox width=\"8rem\" height=\"8rem\" background=\"#D9D9D9\" borderRadius=\"50%\" />\n      <FlexBox column padding=\"1.4rem\" gap=\"1.25rem\">\n        <FlexTextBox fontSize=\"1.8rem\">{user.nickName}</FlexTextBox>\n        <FlexTextBox fontSize=\"1.25rem\">\n          {user.major !== [] && user.major[0]} / {user.grade}학년\n        </FlexTextBox>\n      </FlexBox>\n    </FlexBox>\n  );\n};\nexport default Profile;\n","import styled from \"styled-components\";\nimport { FlexBox, FlexTextBox } from \"components/Common\";\n\nconst Text = styled.div`\n  color: #292929;\n  font-size: 0.92rem;\n  font-weight: 600;\n  line-height: 120%;\n  text-align: center;\n  margin: 0.1rem 0 0 0;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  word-break: break-word;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n`;\n\nconst MyArticleCard = ({ title, updated_at, comments_count, content, onClick }) => {\n  return (\n    <FlexBox\n      width=\"100%\"\n      // height=\"7rem\"\n      padding=\"0.8rem 1.5rem\"\n      gap=\"1rem\"\n      background=\"white\"\n      boxShadow=\"1px 2px 3px 2px #ececec\"\n      cursor=\"pointer\"\n      column\n      onClick={onClick}\n    >\n      <FlexTextBox fontSize=\"1.05rem\">{title}</FlexTextBox>\n      <Text>{content}</Text>\n      <FlexBox gap=\"1rem\">\n        <FlexTextBox>{updated_at && updated_at.split(\"/\")[0]}</FlexTextBox>\n        <FlexTextBox>댓글 {comments_count}</FlexTextBox>\n      </FlexBox>\n    </FlexBox>\n  );\n};\n\nexport default MyArticleCard;\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  QueryObserverOptions,\n  QueryObserverResult,\n  DefaultedQueryObserverOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map((observer) => [observer.options.queryHash, observer]),\n      )\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getQueries() {\n    return this.observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.observers\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[],\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const defaultedQueryOptions = queries.map((options) =>\n      this.client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: QueryObserverMatch[] =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObservers.find(\n          (observer) =>\n            observer.options.queryHash === defaultedOptions.queryHash,\n        )\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = matchingObservers.map(\n      (match) => match.defaultedQueryOptions.queryHash,\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) =>\n        !matchedQueryHashes.includes(defaultedOptions.queryHash),\n    )\n\n    const unmatchedObservers = prevObservers.filter(\n      (prevObserver) =>\n        !matchingObservers.some((match) => match.observer === prevObserver),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      },\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach((listener) => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n","import { axiosInstance } from \"./config\";\r\n\r\nconst client = axiosInstance;\r\n\r\nconst userPostAPI = {\r\n  getMyPosts: () => {\r\n    return client.get(\"post/my_post/\").then((res) => res.data.results);\r\n  },\r\n  getScrappedPosts: () => {\r\n    return client.get(\"post/scrap_post/\").then((res) => res.data.results);\r\n  },\r\n};\r\n\r\nexport default userPostAPI;\r\n","import { useQueries } from \"@tanstack/react-query\";\r\nimport userPostAPI from \"apis/userPostAPI\";\r\n\r\n// 대학교 리스트 받는 쿼리\r\nconst useMyPostListQueries = () => {\r\n  return useQueries({\r\n    queries: [\r\n      {\r\n        queryKey: [\"getMyPosts\"],\r\n        queryFn: async () => await userPostAPI.getMyPosts(),\r\n        staleTime: 60 * 1000,\r\n        onError: (err) => {\r\n          console.log(err);\r\n        },\r\n      },\r\n      {\r\n        queryKey: [\"getScrappedPosts\"],\r\n        queryFn: async () => await userPostAPI.getScrappedPosts(),\r\n        staleTime: 60 * 1000,\r\n        onError: (err) => {\r\n          console.log(err);\r\n        },\r\n      },\r\n    ],\r\n  });\r\n};\r\n\r\nexport default useMyPostListQueries;\r\n","import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryFunction } from '@tanstack/query-core'\nimport { notifyManager, QueriesObserver } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseQueryOptions, UseQueryResult } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport {\n  ensureStaleTime,\n  shouldSuspend,\n  fetchOptimistic,\n  willFetch,\n} from './suspense'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// - `context` is omitted as it is passed as a root-level option to `useQueries` instead.\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = Omit<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'context'>\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n    : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n    T extends [infer TQueryFnData, infer TError, infer TData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData>\n    : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, unknown, TData, TQueryKey>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey> }\n    ? UseQueryOptionsForUseQueries<\n        TQueryFnData,\n        unknown,\n        TQueryFnData,\n        TQueryKey\n      >\n    : // Fallback\n      UseQueryOptionsForUseQueries\n\ntype GetResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? UseQueryResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryResult<TData, TError>\n    : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n    T extends [any, infer TError, infer TData]\n    ? UseQueryResult<TData, TError>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryResult<TQueryFnData>\n    : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<unknown, any>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryResult<TData>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, any> }\n    ? UseQueryResult<TQueryFnData>\n    : // Fallback\n      UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryOptionsForUseQueries[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetOptions<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]>\n  : unknown[] extends T\n  ? T\n  : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n  // use this to infer the param types in the case of Array.map() argument\n  T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      infer TQueryKey\n    >[]\n  ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData, TQueryKey>[]\n  : // Fallback\n    UseQueryOptionsForUseQueries[]\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryResult[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetResults<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]>\n  : T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      any\n    >[]\n  ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n    UseQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[]\n  : // Fallback\n    UseQueryResult[]\n\nexport function useQueries<T extends any[]>({\n  queries,\n  context,\n}: {\n  queries: readonly [...QueriesOptions<T>]\n  context?: UseQueryOptions['context']\n}): QueriesResults<T> {\n  const queryClient = useQueryClient({ context })\n  const isRestoring = useIsRestoring()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((options) => {\n        const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, queryClient, isRestoring],\n  )\n\n  const [observer] = React.useState(\n    () => new QueriesObserver(queryClient, defaultedQueries),\n  )\n\n  const optimisticResult = observer.getOptimisticResult(defaultedQueries)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, { listeners: false })\n  }, [defaultedQueries, observer])\n\n  const errorResetBoundary = useQueryErrorResetBoundary()\n\n  defaultedQueries.forEach((query) => {\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary)\n    ensureStaleTime(query)\n  })\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const shouldAtLeastOneSuspend = optimisticResult.some((result, index) =>\n    shouldSuspend(defaultedQueries[index], result, isRestoring),\n  )\n\n  const suspensePromises = shouldAtLeastOneSuspend\n    ? optimisticResult.flatMap((result, index) => {\n        const options = defaultedQueries[index]\n        const queryObserver = observer.getObservers()[index]\n\n        if (options && queryObserver) {\n          if (shouldSuspend(options, result, isRestoring)) {\n            return fetchOptimistic(options, queryObserver, errorResetBoundary)\n          } else if (willFetch(result, isRestoring)) {\n            void fetchOptimistic(options, queryObserver, errorResetBoundary)\n          }\n        }\n        return []\n      })\n    : []\n\n  if (suspensePromises.length > 0) {\n    throw Promise.all(suspensePromises)\n  }\n\n  const firstSingleResultWhichShouldThrow = optimisticResult.find(\n    (result, index) =>\n      getHasError({\n        result,\n        errorResetBoundary,\n        useErrorBoundary: defaultedQueries[index]?.useErrorBoundary ?? false,\n        query: observer.getQueries()[index]!,\n      }),\n  )\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error\n  }\n\n  return optimisticResult as QueriesResults<T>\n}\n","import { FlexBox, FlexTextBox } from \"components/Common\";\nimport Searchbar from \"components/Navbar/Searchbar\";\nimport Profile from \"components/MyPage/Profile\";\nimport MyArticleCard from \"components/MyPage/MyArticleCard\";\nimport { useMyPostListQueries } from \"queries/mypage\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst MyPage = () => {\n  const navigate = useNavigate();\n  const [{ data: myPosts }, { data: scrappedPosts }] = useMyPostListQueries();\n  const category = {\n    R: \"review\",\n    A: \"ad\",\n  };\n  return (\n    <>\n      <FlexBox width=\"100%\" column margin=\"2rem 0 0 0\" gap=\"2.2rem\">\n        <Searchbar />\n        <FlexBox width=\"100%\" column gap=\"4rem\" margin=\"2rem 0 0 0\">\n          <Profile />\n          <FlexBox width=\"100%\" gap=\"7%\">\n            <FlexBox width=\"90%\" gap=\"1.25rem\" column>\n              <FlexTextBox fontSize=\"1.25rem\">내가 쓴 글</FlexTextBox>\n              {myPosts &&\n                myPosts.map((post, idx) => (\n                  <MyArticleCard\n                    key={idx}\n                    {...post}\n                    onClick={() => {\n                      navigate(`/${category[post.type]}/${post.related_id}`);\n                    }}\n                  />\n                ))}\n            </FlexBox>\n            <FlexBox width=\"90%\" gap=\"1.25rem\" column>\n              <FlexTextBox fontSize=\"1.25rem\">내가 스크랩한 글</FlexTextBox>\n              {scrappedPosts &&\n                scrappedPosts.map((post, idx) => (\n                  <MyArticleCard\n                    key={idx}\n                    {...post}\n                    onClick={() => navigate(`/${category[post.type]}/${post.related_id}`)}\n                  />\n                ))}\n            </FlexBox>\n          </FlexBox>\n        </FlexBox>\n      </FlexBox>\n    </>\n  );\n};\nexport default MyPage;\n"],"names":["FlexBox","props","children","width","height","margin","padding","gap","borderRadius","column","reverse","wrap","justifyContent","alignItems","center","background","position","right","top","borderBottom","color","boxShadow","onClick","dir","css","defaultProps","type","fontWeight","fontSize","COLOR","textDecoration","backgroundColor","disabled","Function","FlexButton","lineHeight","textAlign","marginBottom","FlexTextBox","Textarea","text","minRow","maxLength","value","onChange","autoFocus","TextareaAutosize","placeholder","minRows","SearchBar","styled","Search","BellIcon","Icon","size","showNoResults","name","font","main","sub","select","select_text","btn","main_gra","gra2","bg","default","dep1","blue","border","user","useRecoilValue","userInfo","nickName","major","grade","Text","title","updated_at","comments_count","content","cursor","split","QueriesObserver","constructor","client","queries","result","observers","observersMap","setQueries","onSubscribe","this","listeners","length","forEach","observer","subscribe","onUpdate","onUnsubscribe","destroy","notifyOptions","notifyManager","prevObservers","newObserverMatches","findMatchingObservers","match","setOptions","defaultedQueryOptions","newObservers","map","newObserversMap","Object","fromEntries","options","queryHash","newResult","getCurrentResult","hasIndexChange","some","index","hasListeners","difference","notify","getQueries","getCurrentQuery","getObservers","getOptimisticResult","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","find","matchedQueryHashes","unmatchedQueries","filter","includes","unmatchedObservers","prevObserver","getObserver","currentObserver","QueryObserver","newOrReusedObservers","keepPreviousData","previouslyUsedObserver","undefined","concat","sort","a","b","indexOf","replaceAt","listener","Subscribable","axiosInstance","getMyPosts","get","then","res","data","results","getScrappedPosts","context","queryClient","useQueryClient","isRestoring","useIsRestoring","defaultedQueries","React","_optimisticResults","optimisticResult","useSyncExternalStore","onStoreChange","errorResetBoundary","useQueryErrorResetBoundary","query","ensurePreventErrorBoundaryRetry","ensureStaleTime","useClearResetErrorBoundary","suspensePromises","shouldSuspend","queryObserver","fetchOptimistic","willFetch","Promise","all","firstSingleResultWhichShouldThrow","getHasError","useErrorBoundary","_defaultedQueries$ind2","error","useQueries","queryKey","queryFn","userPostAPI","staleTime","onError","err","console","log","navigate","useNavigate","useMyPostListQueries","myPosts","scrappedPosts","category","R","A","Searchbar","post","idx","related_id"],"sourceRoot":""}